# ======================================[STEP-0]============================================
# docker compose config
networks:
  equynhon-network:
    driver: bridge

secrets:
  # ===================[SYSTEM]===================
  # System ROOT CA
  # https://stackoverflow.com/questions/47434877/how-to-generate-keystore-and-truststore
  system-ssl-trusted-certificate:
    file: ${SYSTEM_SSL_TRUSTED_DIR_PATH:-.docker/system/ssl}/truststore.crt
  system-ssl-truststore-jks:
    file: ${SYSTEM_SSL_TRUSTED_DIR_PATH:-.docker/system/ssl}/truststore.jks
  # ===================[Authorization]===================
  # Authorization SSL & Keys
  authorization-ssl-certificate:
    file: ${AUTHORIZAITON_SSL_CERTIFICATE_DIR_PATH:-.docker/authorization/ssl}/keystore.crt
  authorization-ssl-certificate-key:
    file: ${AUTHORIZAITON_SSL_CERTIFICATE_DIR_PATH:-.docker/authorization/ssl}/keystore.key
  authorization-ssl-keystore-jks:
    file: ${AUTHORIZAITON_SSL_CERTIFICATE_DIR_PATH:-.docker/authorization/ssl}/keystore.jks
  # Authorization Keys
  authorization-encryption-jks:
    file: ${AUTHORIZAITON_JKS_DIR_PATH:-.docker/authorization/jks}/encryption.jks

volumes:
  # redis
  redis-conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_CONF_DIR_PATH:-.docker/redis/conf}
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_DIR_PATH:-.docker/redis/data}
  # postgres
  postgres-conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_CONF_DIR_PATH:-.docker/postgres/conf}
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_DIR_PATH:-.docker/postgres/data}
  # kafka
  kafka-secrets:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${KAFKA_CONF_DIR_PATH:-.docker/kafka/secrets}
  kafka-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${KAFKA_DATA_DIR_PATH:-.docker/kafka/logs}
  # nginx
  nginx-conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NGINX_CONF_DIR_PATH:-.docker/nginx/conf}
  nginx-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NGINX_CACHE_DIR_PATH:-.docker/nginx/cache}
  nginx-log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NGINX_LOG_DIR_PATH:-.docker/nginx/log}
  # certbot
  certbot-conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CERTBOT_CONF_DIR_PATH:-.docker/certbot/conf}
  certbot-www:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CERTBOT_WWW_DIR_PATH:-.docker/certbot/conf}
  # for app
  web_upload:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AUTHORIZAITON_UPLOAD_DIR_PATH:-.docker/authorization/upload}
  web_log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AUTHORIZAITON_LOG_DIR_PATH:-.docker/authorization/log}

services:
  # Cloudflare Tunnel Service
  # docker compose up --build -d --remove-orphans cloudflare-tunnel
  cloudflare-tunnel:
    image: cloudflare/cloudflared:latest              # Pull the latest version of the Cloudflare Tunnel image
    container_name: cloudflare-tunnel                 # Name of the Cloudflare Tunnel container
    hostname: cloudflare-tunnel                       # Hostname for the Cloudflare Tunnel container
    restart: unless-stopped                           # Restart the container unless manually stopped
    # Logging configuration for Cloudflare Tunnel container
    logging:
      driver: "json-file"                             # Use the default json-file logging driver
      options:
        max-size: "100m"                              # Maximum log file size before rotation (100 MB)
        max-file: "10"                                # Maximum number of log files to retain (10)
    # Network mode configuration
    # network_mode: "host"                              # Use the host network (no isolation between host and container)
    networks:
      - equynhon-network
    # Command to run Cloudflare Tunnel
    command: tunnel --no-autoupdate run               # Command to start the Cloudflare tunnel
    # Volume configuration for time synchronization and hosts file persistence
    volumes:
      - /etc/localtime:/etc/localtime:ro              # Synchronize time with the host
      # - ./config/hosts:/etc/hosts                     # Mount hosts file from host to container
    # Environment variables for Cloudflare Tunnel
    environment:
      - "TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}"     # Pass the Cloudflare Tunnel token from environment variable
    # Health check configuration to verify Cloudflare Tunnel readiness
    healthcheck:
      test: ["CMD", "cloudflared", "--version"]       # Check if cloudflared version command works
      interval: 30s                                   # Time between health check attempts
      timeout: 10s                                    # Time to wait for a response
      retries: 3                                      # Number of retries before marking as unhealthy
      start_period: 10s                               # Delay before health checks begin
    # Container labels for additional metadata
    # labels:
    #   - "com.centurylinklabs.watchtower.enable=true"  # Enable automatic updates with Watchtower

  # https://hub.docker.com/_/postgres
  # docker compose up --build -d --remove-orphans postgres
  # docker stack deploy -c docker-compose.yml mypostgresstack
  postgres:
    # https://www.postgresql.org/docs/14/runtime-config.html
    # https://medium.com/norsys-octogone/a-local-environment-for-postgresql-with-docker-compose-7ae68c998068
    # https://medium.com/@svignesh/running-rails-postgresql-in-docker-swarm-cluster-431c0833d56e
    # https://www.crunchydata.com/blog/an-easy-recipe-for-creating-a-postgresql-cluster-with-docker-swarm
    container_name: postgres
    image: postgres:17-alpine
    restart: unless-stopped
    networks:
      - equynhon-network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - postgres-conf:/etc/postgresql/postgresql.conf
      - postgres-data:/var/lib/postgresql/data
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    environment:
      LANG: en_US.utf8
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      start_period: 30s
      interval: 60s
      timeout: 10s
      retries: 5

  # https://hub.docker.com/_/redis
  # docker compose up --build -d --remove-orphans redis
  redis:
    # https://redis.io/docs/latest/operate/oss_and_stack/management/config-file/
    container_name: redis
    image: redis:8-alpine
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    networks:
      - equynhon-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - redis-conf:/usr/local/etc/redis/redis.conf
      - redis-data:/data
    environment:
      REDIS_USER: ${REDIS_USER:-default}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret01@X}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 60s
      timeout: 10s
      retries: 5

  oracle-db:
    container_name: oracle-db
    image: container-registry.oracle.com/database/free:latest
    restart: unless-stopped
    ports:
      - "1521:1521"
      - "5500:5500"
    environment:
      ENABLE_ARCHIVELOG: true
      ENABLE_FORCE_LOGGING: true
      ORACLE_PDB: ${ORACLE_PDB}
      ORACLE_PWD: ${ORACLE_PWD}
    volumes:
      - ${DIR_PATH_HOST}/oracle/db:/opt/oracle/oradata
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  # =========================== [KAFKA] ===========================
  # https://github.com/apache/kafka/tree/trunk/docker/examples/jvm/single-node/ssl
  broker:
    hostname: broker
    container_name: broker
    restart: unless-stopped
    build:
      context: ./kafka
      dockerfile: Dockerfile
      args:
        HOSTNAME: broker
        SSL_DOMAIN: ${KAFKA_SSL_DOMAIN_1}
        SSL_KEYSTORE_FILE: keystore.jks
        SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
        SSL_TRUSTSTORE_FILE: truststore.jks
        SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    ports:
      - ${KAFKA_PORT_1}:9093
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - kafka-secrets:/etc/kafka/secrets
      - kafka-logs:/tmp/kraft-combined-logs
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_ADVERTISED_LISTENERS: 'SSL-INTERNAL://broker:19093,SSL://${KAFKA_SSL_DOMAIN_1}:${KAFKA_PORT_1}'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'SSL://:9093,CONTROLLER://:29093,SSL-INTERNAL://:19093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_SSL_ENABLED_PROTOCOLS: 'TLSv1.3'
      KAFKA_SSL_KEYSTORE_FILENAME: 'broker.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

  # =========================== [KAFKA-CLUSTER] ===========================
  # https://github.com/apache/kafka/tree/trunk/docker/examples/jvm/cluster/combined/ssl
  kafka-1:
    # image: apache/kafka:latest
    hostname: kafka-1
    container_name: kafka-1
    restart: unless-stopped
    build:
      context: ./kafka
      dockerfile: Dockerfile
      args:
        HOSTNAME: kafka-1
        SSL_DOMAIN: ${KAFKA_SSL_DOMAIN_1}
        SSL_KEYSTORE_FILE: keystore1.jks
        SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
        SSL_TRUSTSTORE_FILE: truststore.jks
        SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    ports:
      - ${KAFKA_PORT_1}:9093
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - kafka-secrets:/etc/kafka/secrets
      - kafka-logs:/tmp/kraft-combined-logs
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-1:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-1:19093,SSL://${KAFKA_SSL_DOMAIN_1}:${KAFKA_PORT_1}
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs/1'
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka-1.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

  kafka-2:
    image: apache/kafka:latest
    hostname: kafka-2
    container_name: kafka-2
    restart: unless-stopped
    build:
      context: ./kafka
      dockerfile: Dockerfile
      args:
        HOSTNAME: kafka-2
        SSL_DOMAIN: ${KAFKA_SSL_DOMAIN_2}
        SSL_KEYSTORE_FILE: keystore2.jks
        SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
        SSL_TRUSTSTORE_FILE: truststore.jks
        SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    depends_on:
      - kafka-1
    ports:
      - ${KAFKA_PORT_2}:9093
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - kafka-secrets:/etc/kafka/secrets
      - kafka-logs:/tmp/kraft-combined-logs
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-2:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-2:19093,SSL://${KAFKA_SSL_DOMAIN_2}:${KAFKA_PORT_2}
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs/2'
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka-2.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

  kafka-3:
    image: apache/kafka:latest
    hostname: kafka-3
    container_name: kafka-3
    build:
      context: ./kafka
      dockerfile: Dockerfile
      args:
        HOSTNAME: kafka-3
        SSL_DOMAIN: ${KAFKA_SSL_DOMAIN_3}
        SSL_KEYSTORE_FILE: keystore3.jks
        SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
        SSL_TRUSTSTORE_FILE: truststore.jks
        SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    depends_on:
      - kafka-1
    ports:
      - ${KAFKA_PORT_3}:9093
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - kafka-secrets:/etc/kafka/secrets
      - kafka-logs:/tmp/kraft-combined-logs
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-3:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-3:19093,SSL://${KAFKA_SSL_DOMAIN_3}:${KAFKA_PORT_3}
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs/3'
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka-3.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

  # =========================== [WEB] ===========================
  frontend:
    container_name: frontend
    restart: unless-stopped
    image: crccheck/hello-world
    secrets:
      - system-ssl-trusted-certificate
      - system-ssl-truststore-jks
      - authorization-ssl-certificate
      - authorization-ssl-certificate-key
      - authorization-ssl-keystore-jks
      - authorization-encryption-jks
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - equynhon-network
    ports:
      - "8000:8000"
      - "8383:8383"
    volumes:
      - web_upload:/app/upload
      - web_log:/app/log
    env_file:
      - ".equynhon.env"
    environment:
      # Truststore (CA Root)
      EQN_SECURITY_TRUSTSTORE_FILE: /run/secrets/system-ssl-truststore-jks
      EQN_SECURITY_CA_CERTIFICATE_FILE: /run/secrets/system-ssl-trusted-certificate
      # Authorization Keystore (CA,keystore,CRT)
      EQN_SECURITY_SSL_KEYSTORE_FILE: /run/secrets/authorization-ssl-keystore-jks
      EQN_SECURITY_SSL_CERTIFICATE_FILE: /run/secrets/authorization-ssl-certificate
      EQN_SECURITY_SSL_CERTIFICATE_KEY_FILE: /run/secrets/authorization-ssl-certificate-key
      # Authorization Keys (Encryption)
      EQN_SECURITY_ENCRYPTION_FILE: /run/secrets/authorization-encryption-jks
      # Database
      EQN_DATABASE_URL: postgresql://postgres:5432/${POSTGRES_DB:-authorization}
      EQN_DATABASE_USERNAME: ${POSTGRES_USER:-postgres}
      EQN_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-secret01@X}
      EQN_CACHE_REDIS: redis://user:pass@host:port
    # healthcheck:
    #   test: [ "CMD", "curl", "-f", "https://localhost:8383/api/health" ]
    #   interval: 200s
    #   timeout: 200s
    #   retries: 5

  # https://hub.docker.com/_/nginx
  # step 2: docker compose up --build -d --remove-orphans frontend nginx
  # step 6: docker compose up --build -d --remove-orphans nginx
  nginx:
    container_name: nginx
    restart: unless-stopped
    depends_on:
      frontend: # service 1
        condition: service_started
    secrets:
      # System
      - system-ssl-trusted-certificate
      # Authorization
      - authorization-ssl-certificate
      - authorization-ssl-certificate-key
    build:
      context: ./nginx
    networks:
      - equynhon-network
    ports:
      - "80:80"
      - '443:443/tcp'
      - '443:443/udp' # use UDP for usage of HTTP/3
    environment:
      NGINX_APP: /app/nginx
      NGINX_HOST: ${HOST_DOMAIN}
      # Authorization
      AUTHORIZATION_EXTERNAL_DOMAIN: ${AUTHORIZATION_PUBLIC_DOMAIN}
      AUTHORIZATION_EXTERNAL_PORT: 80
      AUTHORIZATION_EXTERNAL_SSL_PORT: 443
      AUTHORIZATION_INTERNAL_SCHEME: https
      AUTHORIZATION_INTERNAL_DOMAIN: authorization
      AUTHORIZATION_INTERNAL_PORT: 8080
      AUTHORIZATION_INTERNAL_SSL_PORT: 8383
      AUTHORIZATION_INTERNAL_SSL_TRUSTED_CERTIFICATE: /run/secrets/system-ssl-trusted-certificate
      AUTHORIZATION_INTERNAL_SSL_CERTIFICATE: /run/secrets/authorization-ssl-certificate
      AUTHORIZATION_INTERNAL_SSL_CERTIFICATE_KEY: /run/secrets/authorization-ssl-certificate-key
      # Frontend
      FRONTEND_SCHEME: https
      FRONTEND_HOST: frontend
      FRONTEND_PORT: 8000
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - nginx-conf:/app/nginx
      - nginx-cache:/var/cache/nginx
      - nginx-log:/var/log/nginx
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot

  # step 3: docker compose up --build -d --remove-orphans certbot
  # step 4: docker logs certbot
  # step 7: crontab -e
  # step 8: 0 5 1 */2 * /usr/bin/docker compose -f ${DIR_PATH_HOST}/docker-compose.yml up certbot
  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes: 
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    command: |
      certonly --webroot -w /var/www/certbot --force-renewal --email ${CERTBOT_REGISTER_EMAIL} -d ${HOST_DOMAIN} --agree-tos
      chmod 755 /etc/letsencrypt/live/${HOST_DOMAIN}/*.pem;
