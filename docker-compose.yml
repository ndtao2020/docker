version: '3'

volumes:
  # database
  redis-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DIR_PATH_HOST}/redis/data
  postgres-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DIR_PATH_HOST}/postgres/data
  # kafka
  kafka-secrets:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DIR_PATH_HOST}/kafka/secrets
  kafka-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DIR_PATH_HOST}/kafka/logs
  # nginx
  nginx-conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DIR_PATH_HOST}/nginx
  certbot-conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DIR_PATH_HOST}/certbot/conf
  certbot-www:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DIR_PATH_HOST}/certbot/www

services:
  # https://hub.docker.com/_/redis
  # docker-compose up --build -d --remove-orphans redis
  redis:
    container_name: redis
    image: redis:8-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-db:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 20s
      timeout: 5s
      retries: 5

  # https://hub.docker.com/_/postgres
  # docker-compose up --build -d --remove-orphans postgres
  postgres:
    container_name: postgres
    image: postgres:17-alpine
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-db:/var/lib/postgresql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      PGDATA: /var/lib/postgresql/17/docker
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 20s
      timeout: 5s
      retries: 5

  oracle-db:
    container_name: oracle-db
    image: container-registry.oracle.com/database/free:latest
    restart: unless-stopped
    ports:
      - "1521:1521"
      - "5500:5500"
    environment:
      ENABLE_ARCHIVELOG: true
      ENABLE_FORCE_LOGGING: true
      ORACLE_PDB: ${ORACLE_PDB}
      ORACLE_PWD: ${ORACLE_PWD}
    volumes:
      - ${DIR_PATH_HOST}/oracle/db:/opt/oracle/oradata
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  # =========================== [KAFKA] ===========================
  # https://github.com/apache/kafka/tree/trunk/docker/examples/jvm/single-node/ssl
  broker:
    hostname: broker
    container_name: broker
    restart: unless-stopped
    build:
      context: ./kafka
      dockerfile: Dockerfile
      args:
        HOSTNAME: broker
        SSL_DOMAIN: ${KAFKA_SSL_DOMAIN_1}
        SSL_KEYSTORE_FILE: keystore.jks
        SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
        SSL_TRUSTSTORE_FILE: truststore.jks
        SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    ports:
      - ${KAFKA_PORT_1}:9093
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - kafka-secrets:/etc/kafka/secrets
      - kafka-logs:/tmp/kraft-combined-logs
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_ADVERTISED_LISTENERS: 'SSL-INTERNAL://broker:19093,SSL://${KAFKA_SSL_DOMAIN_1}:${KAFKA_PORT_1}'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'SSL://:9093,CONTROLLER://:29093,SSL-INTERNAL://:19093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_SSL_ENABLED_PROTOCOLS: 'TLSv1.3'
      KAFKA_SSL_KEYSTORE_FILENAME: 'broker.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

  # =========================== [KAFKA-CLUSTER] ===========================
  # https://github.com/apache/kafka/tree/trunk/docker/examples/jvm/cluster/combined/ssl
  kafka-1:
    # image: apache/kafka:latest
    hostname: kafka-1
    container_name: kafka-1
    restart: unless-stopped
    build:
      context: ./kafka
      dockerfile: Dockerfile
      args:
        HOSTNAME: kafka-1
        SSL_DOMAIN: ${KAFKA_SSL_DOMAIN_1}
        SSL_KEYSTORE_FILE: keystore1.jks
        SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
        SSL_TRUSTSTORE_FILE: truststore.jks
        SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    ports:
      - ${KAFKA_PORT_1}:9093
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - kafka-secrets:/etc/kafka/secrets
      - kafka-logs:/tmp/kraft-combined-logs
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-1:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-1:19093,SSL://${KAFKA_SSL_DOMAIN_1}:${KAFKA_PORT_1}
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs/1'
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka-1.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

  kafka-2:
    image: apache/kafka:latest
    hostname: kafka-2
    container_name: kafka-2
    restart: unless-stopped
    build:
      context: ./kafka
      dockerfile: Dockerfile
      args:
        HOSTNAME: kafka-2
        SSL_DOMAIN: ${KAFKA_SSL_DOMAIN_2}
        SSL_KEYSTORE_FILE: keystore2.jks
        SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
        SSL_TRUSTSTORE_FILE: truststore.jks
        SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    depends_on:
      - kafka-1
    ports:
      - ${KAFKA_PORT_2}:9093
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - kafka-secrets:/etc/kafka/secrets
      - kafka-logs:/tmp/kraft-combined-logs
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-2:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-2:19093,SSL://${KAFKA_SSL_DOMAIN_2}:${KAFKA_PORT_2}
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs/2'
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka-2.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

  kafka-3:
    image: apache/kafka:latest
    hostname: kafka-3
    container_name: kafka-3
    build:
      context: ./kafka
      dockerfile: Dockerfile
      args:
        HOSTNAME: kafka-3
        SSL_DOMAIN: ${KAFKA_SSL_DOMAIN_3}
        SSL_KEYSTORE_FILE: keystore3.jks
        SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
        SSL_TRUSTSTORE_FILE: truststore.jks
        SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    depends_on:
      - kafka-1
    ports:
      - ${KAFKA_PORT_3}:9093
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - kafka-secrets:/etc/kafka/secrets
      - kafka-logs:/tmp/kraft-combined-logs
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-3:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-3:19093,SSL://${KAFKA_SSL_DOMAIN_3}:${KAFKA_PORT_3}
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs/3'
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka-3.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

  # =========================== [WEB] ===========================
  frontend:
    container_name: frontend
    restart: unless-stopped
    image: crccheck/hello-world
    ports:
      - 8000:8000

  # https://hub.docker.com/_/nginx
  # step 2: docker-compose up --build -d --remove-orphans frontend nginx
  # step 6: docker-compose up --build -d --remove-orphans nginx
  nginx:
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - frontend
    build: ./nginx
    ports:
      - "80:80"
      - '443:443/tcp'
      - '443:443/udp' # use UDP for usage of HTTP/3
    environment:
      NGINX_APP: /app/nginx
      NGINX_HOST: ${HOST_DOMAIN}
      FRONTEND_SCHEME: https
      FRONTEND_HOST: frontend
      FRONTEND_PORT: 8000
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - nginx-conf:/app/nginx
      - nginx-cache:/var/cache/nginx
      - nginx-log:/var/log/nginx
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot

  # step 3: docker-compose up --build -d --remove-orphans certbot
  # step 4: docker logs certbot
  # step 7: crontab -e
  # step 8: 0 5 1 */2 * /usr/bin/docker compose -f ${DIR_PATH_HOST}/docker-compose.yml up certbot
  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes: 
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    command: |
      certonly --webroot -w /var/www/certbot --force-renewal --email ${CERTBOT_REGISTER_EMAIL} -d ${HOST_DOMAIN} --agree-tos
      chmod 700 /etc/letsencrypt/live/
